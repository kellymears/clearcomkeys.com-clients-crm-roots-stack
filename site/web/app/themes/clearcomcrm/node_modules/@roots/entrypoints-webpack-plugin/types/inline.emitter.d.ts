import Webpack from 'webpack';
import { Entry } from './webpack.plugin';
/**
 * Emits inline html for each entrypoint
 *
 * @param compilation - Webpack compilation instance
 * @param publicPath - public path for assets
 */
export declare class InlineEmitter {
    compilation: Webpack.Compilation;
    assets: Entry;
    publicPath: string;
    /**
     * Class constructor
     *
     * @param compilation - webpack compilation
     * @param publicPath - asset publicPath
     *
     * @public
     */
    constructor(compilation: Webpack.Compilation, assets: Entry, publicPath: string);
    /**
     * Get compiled asset file contents
     *
     * @param file - asset file
     * @returns - asset file contents
     *
     * @public
     * @decorator `@bind`
     */
    getCompiledAsset(file: string): string;
    /**
     * Reduce an entrypoint entry to inline markup
     *
     * @param emittedHtml - emitted html
     * @param entrypoint - entrypoint tuple [filetype, files]
     *
     * @public
     * @decorator `@bind`
     */
    inlineReducer(emittedHtml: string, [type, files]: [string, Array<string>]): string;
    /**
     * Reduce an entrypoint css filename to inline markup
     *
     * @param emittedHtml - emitted html
     * @param file - filename
     *
     * @public
     * @decorator `@bind`
     */
    styleReducer(emittedHtml: string, file: string): string;
    /**
     * Reduce an entrypoint js filename to inline markup
     *
     * @param emittedHtml - emitted html
     * @param file - filename
     *
     * @public
     * @decorator `@bind`
     */
    scriptReducer(a: string, file: string): string;
    /**
     * Reduce entrypoint assets to inline markup
     *
     * @param emittedHtml - emitted html
     * @param assets - Entrypoint records
     *
     * @public
     * @decorator `@bind`
     */
    emitHtmlTags(): void;
}
//# sourceMappingURL=inline.emitter.d.ts.map