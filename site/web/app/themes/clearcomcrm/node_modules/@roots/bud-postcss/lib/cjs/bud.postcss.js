"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostCssConfig = void 0;
const bud_support_1 = require("@roots/bud-support");
const container_1 = require("@roots/container");
/**
 * Bud PostCSS Extension
 *
 * @public
 */
class PostCssConfig extends container_1.Container {
    /**
     * Set a plugin
     *
     * @param name - plugin handle
     * @param plugin - the plugin object or a tuple of plugin and options
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPlugin(name, plugin) {
        this.set(name, Array.isArray(plugin) ? plugin : [plugin]);
        return this;
    }
    /**
     * Sets all plugins
     *
     * @param plugins - plugins object
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPlugins(plugins) {
        this.setStore(plugins);
        return this;
    }
    /**
     * Remove a plugin
     *
     * @param plugins - handle of plugin to remove
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    unsetPlugin(plugin) {
        this.has(plugin) && this.remove(plugin);
        return this;
    }
    /**
     * Override options on a plugin
     *
     * @param plugins - handle of plugin to modify options of
     * @param options - the options to set
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPluginOptions(plugin, options) {
        this.set(plugin, [
            this.isArray(plugin) ? this.get(plugin).shift() : this.get(plugin),
            options,
        ]);
        return this;
    }
}
__decorate([
    bud_support_1.bind
], PostCssConfig.prototype, "setPlugin", null);
__decorate([
    bud_support_1.bind
], PostCssConfig.prototype, "setPlugins", null);
__decorate([
    bud_support_1.bind
], PostCssConfig.prototype, "unsetPlugin", null);
__decorate([
    bud_support_1.bind
], PostCssConfig.prototype, "setPluginOptions", null);
exports.PostCssConfig = PostCssConfig;
