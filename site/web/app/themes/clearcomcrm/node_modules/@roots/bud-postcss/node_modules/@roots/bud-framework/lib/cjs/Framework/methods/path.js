"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.path = void 0;
const node_path_1 = require("node:path");
/**
 * Transform `@alias` path
 *
 * @param app - Framework instance
 * @param base - Path segment
 * @returns string
 *
 * @public
 */
const transformShorthandBase = (app, base) => {
    /**
     * If path contains multiple segments, explode into an array
     * If path contains one segment, insert it into a blank array
     */
    const [ident, ...parts] = base.includes(node_path_1.sep)
        ? base.split(node_path_1.sep)
        : [base];
    !app.hooks.has(`location.${ident}`) &&
        app.error(`\`${ident}\` is not a registered path. It must be defined with bud.setPath`);
    /**
     * Replace
     */
    const value = app.hooks.filter(`location.${ident}`);
    return (0, node_path_1.join)(value, ...(parts ?? []).filter(Boolean));
};
const path = function (base, ...segments) {
    const app = this;
    /**
     * If no base path was provided return the project directory
     */
    if (!base)
        return app.context.projectDir;
    /**
     * If base path starts with `/` return the joined path and segments (if any)
     */
    if (base.startsWith('/'))
        return segments.length ? (0, node_path_1.join)(base, ...segments) : base;
    /**
     * Replace any `@alias` aliases with their corresponding entry
     */
    const normalized = base.startsWith(`@`)
        ? transformShorthandBase(app, base)
        : base;
    const absolutePath = base.startsWith(`/`)
        ? normalized
        : (0, node_path_1.resolve)(app.context.projectDir, normalized);
    return segments.length
        ? (0, node_path_1.resolve)(absolutePath, ...(segments ?? []).filter(Boolean))
        : absolutePath;
};
exports.path = path;
