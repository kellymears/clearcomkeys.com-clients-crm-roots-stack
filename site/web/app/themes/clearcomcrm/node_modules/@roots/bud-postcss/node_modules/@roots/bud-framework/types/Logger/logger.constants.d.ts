/// <reference types="node" />
/**
 * Instance configuration
 *
 * @internal
 */
export declare const INSTANCE_CONFIG: any;
/**
 * @internal
 */
interface Type {
    /** The icon corresponding to the logger. */
    badge: string;
    /**
     * The color of the label, can be any of the foreground colors supported by
     * [chalk](https://github.com/chalk/chalk#colors).
     */
    color: string;
    /** The label used to identify the type of the logger. */
    label: string;
    logLevel?: string | undefined;
    stream?: NodeJS.WriteStream | NodeJS.WriteStream[] | undefined;
}
/**
 * @internal
 */
export interface types {
    [key: string]: Type;
}
export declare const enum LEVEL {
    VERBOSE = "log",
    STANDARD = "timer"
}
export declare const types: (app: any) => {
    error: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
        process: any[];
    };
    fatal: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
        process: any[];
    };
    star: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    info: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    success: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    warn: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    complete: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    pending: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
        stream: NodeJS.WriteStream & {
            fd: 1;
        };
    };
    note: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    start: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    pause: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    debug: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    await: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    watch: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
    log: {
        badge: string;
        color: string;
        label: string;
        logLevel: LEVEL;
    };
};
export {};
//# sourceMappingURL=logger.constants.d.ts.map