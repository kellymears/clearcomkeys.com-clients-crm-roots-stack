import { Container } from '@roots/container';
interface Registry {
    [key: string]: [any, any?] | any;
}
/**
 * Bud PostCSS Extension
 *
 * @public
 */
export declare class PostCssConfig extends Container<Registry> {
    /**
     * Set a plugin
     *
     * @param name - plugin handle
     * @param plugin - the plugin object or a tuple of plugin and options
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPlugin(name: string, plugin: [any, any?] | any): this;
    /**
     * Sets all plugins
     *
     * @param plugins - plugins object
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPlugins(plugins: Registry): this;
    /**
     * Remove a plugin
     *
     * @param plugins - handle of plugin to remove
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    unsetPlugin(plugin: string): this;
    /**
     * Override options on a plugin
     *
     * @param plugins - handle of plugin to modify options of
     * @param options - the options to set
     * @returns the bud.postcss instance
     *
     * @public
     * @decorator `@bind` - binds the method to the class instance
     */
    setPluginOptions(plugin: string, options: any): this;
}
export {};
//# sourceMappingURL=bud.postcss.d.ts.map