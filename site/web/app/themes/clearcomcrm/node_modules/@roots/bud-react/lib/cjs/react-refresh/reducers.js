"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.add = void 0;
const lodash_1 = require("lodash");
/**
 * Filter 'react-refresh/runtime' from entrypoint assets
 *
 * @param assets - array of assets
 * @returns assets array
 *
 * @internal
 */
const filterAssetsArray = (assets) => assets.filter(imports => imports !== 'react-refresh/runtime');
/**
 * Adds react-refresh client script to each entrypoint
 *
 * @public
 */
function add(entries) {
    return Object.entries(entries).reduce((all, [name, assets]) => {
        if ((0, lodash_1.isString)(assets)) {
            return { ...all, [name]: ['react-refresh/runtime', assets] };
        }
        if ((0, lodash_1.isArray)(assets) && !assets.includes('react-refresh/runtime')) {
            assets.unshift('react-refresh/runtime');
        }
        if (assets?.import &&
            !assets.import.includes('react-refresh/runtime')) {
            assets.import.unshift('react-refresh/runtime');
        }
        return { ...all, [name]: assets };
    }, {});
}
exports.add = add;
/**
 * Removes react-refresh client script from each entrypoint
 *
 * @public
 */
function remove(entries) {
    return Object.entries(entries).reduce((all, [name, assets]) => {
        if ((0, lodash_1.isString)(assets) && assets === 'react-refresh/runtime') {
            return all;
        }
        if ((0, lodash_1.isArray)(assets) && assets.includes('react-refresh/runtime')) {
            return { ...all, [name]: filterAssetsArray(assets) };
        }
        new Set(['dependOn', 'import']).forEach(key => {
            if (!assets[key])
                return;
            assets[key] = filterAssetsArray(assets[key]);
        });
        return { ...all, [name]: assets };
    }, {});
}
exports.remove = remove;
