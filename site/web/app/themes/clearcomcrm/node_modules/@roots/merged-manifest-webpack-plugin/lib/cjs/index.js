"use strict";
// Copyright (c) Roots Foundation, LLC. All rights reserved.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MergedManifestWebpackPlugin = void 0;
const fs = __importStar(require("fs-extra"));
const helpful_decorators_1 = require("helpful-decorators");
const path = __importStar(require("path"));
/**
 * Merged Manifest Webpack Plugin
 *
 * @public
 */
class MergedManifestWebpackPlugin {
    /**
     * Plugin constructor
     *
     * @public
     */
    constructor(options) {
        /**
         * Plugin ident
         *
         * @public
         */
        this.plugin = {
            name: 'MergedManifestPlugin',
        };
        /**
         * @public
         */
        this.file = 'entrypoints.json';
        /**
         * @public
         */
        this.entrypointsName = 'entrypoints.json';
        /**
         * @public
         */
        this.wordpressName = 'wordpress.json';
        options &&
            Object.keys(options).map(prop => {
                Object.assign(this, { [prop]: options[prop] });
            });
    }
    /**
     * @public
     */
    apply(compiler) {
        this.dir = compiler.options.output.path;
        this.path = path.resolve(this.dir, this.file);
        compiler.hooks.done.tapAsync(this.plugin, this.done);
    }
    /**
     * @public
     */
    async done(_compilation, callback) {
        if (!this.isBuildable()) {
            return callback();
        }
        /**
         * Read manifests.
         */
        try {
            const entrypointsManifest = await this.manifestContent(this.entrypointsName);
            const wordpressManifest = await this.manifestContent(this.wordpressName);
            /**
             * Reduce aggregate manifest and write to file.
             */
            await fs.outputFile(this.path, this.format(Object.entries(entrypointsManifest).reduce((acc, [key, value]) => ({
                ...acc,
                [key]: {
                    ...value,
                    ...{ dependencies: wordpressManifest[key] },
                },
            }), {})));
            /**
             * Remove wordpress.json manifest.
             */
            await fs.remove(this.manifestPath(this.wordpressName));
        }
        catch (err) {
            throw new Error(err);
        }
        return callback();
    }
    /**
     * @public
     */
    format(object) {
        return JSON.stringify(object, null, 2);
    }
    /**
     * @public
     */
    isBuildable() {
        return (this.manifestExists(this.entrypointsName) &&
            this.manifestExists(this.wordpressName));
    }
    /**
     * @public
     */
    manifestPath(file) {
        return path.resolve(this.dir, file);
    }
    /**
     * @public
     */
    manifestExists(file) {
        return fs.existsSync(this.manifestPath(file));
    }
    /**
     * @public
     */
    async manifestContent(file) {
        return await fs.readJson(this.manifestPath(file));
    }
}
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "apply", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "done", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "format", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "isBuildable", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "manifestPath", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "manifestExists", null);
__decorate([
    helpful_decorators_1.bind
], MergedManifestWebpackPlugin.prototype, "manifestContent", null);
exports.MergedManifestWebpackPlugin = MergedManifestWebpackPlugin;
