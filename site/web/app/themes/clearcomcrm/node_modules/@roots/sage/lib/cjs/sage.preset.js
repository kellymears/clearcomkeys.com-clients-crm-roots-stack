"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const event_app_close_1 = __importDefault(require("./hooks/event.app.close"));
const event_compiler_done_1 = __importDefault(require("./hooks/event.compiler.done"));
const ThemeJSON = __importStar(require("./theme/extension"));
/**
 * Sage preset
 *
 * @public
 */
const Sage = {
    /**
     * Extension identifier
     *
     * @public
     */
    name: '@roots/sage',
    /**
     * Extension boot
     *
     * @public
     */
    boot: async (app) => {
        /**
         * Add theme.json generator support
         */
        await app.extensions.add(ThemeJSON);
        /**
         * Override output directory for svg assets
         * `@roots/bud-build` places them, by default, in `svg/`
         */
        app.build.rules.svg.setGenerator(app => ({
            filename: app.store.is('features.hash', true)
                ? 'images/'.concat(app.store.get('hashFormat')).concat('[ext]')
                : 'images/'.concat(app.store.get('fileFormat')).concat('[ext]'),
        }));
        /**
         * Application paths
         */
        app.setPath({
            '@src': 'resources',
            '@dist': 'public',
            '@app': 'app',
            '@resources': '@src',
            '@public': '@dist',
            '@fonts': '@src/fonts',
            '@images': '@src/images',
            '@scripts': '@src/scripts',
            '@styles': '@src/styles',
            '@views': '@src/views',
        });
        /**
         * Application aliases
         */
        app.alias({
            '@fonts': 'resources/fonts',
            '@images': 'resources/images',
            '@scripts': 'resources/scripts',
            '@styles': 'resources/styles',
        });
        /**
         * Separate vendor code from application
         */
        app.splitChunks();
        /**
         * Production/development configuration
         */
        app.when(
        /**
         * Test for production
         */
        app.isProduction, 
        /**
         * Production
         */
        () => app.minimize().hash().runtime('single'), 
        /**
         * Development
         */
        () => {
            app
                .devtool()
                .hooks.action('event.compiler.done', event_compiler_done_1.default)
                .hooks.action('event.app.close', event_app_close_1.default);
        });
    },
};
exports.default = Sage;
