import { TailwindColorValue, TailwindValuesColor } from 'tailwindcss/tailwind-config';
import { WPThemeJson } from '.';
export declare type WordPressPalette = WPThemeJson['settings']['color']['palette'];
export { TailwindColorValue, TailwindValuesColor };
/**
 * Make a theme.json palette.color item from a slug and a color
 *
 * @param slug - color slug
 * @param value - color value
 * @returns WordPress theme.json color
 */
export interface transform {
    (slug: string, color: string): WordPressPalette[any];
}
export declare const transform: transform;
/**
 * TailwindCSS palette to WordPress palette reducer
 *
 * @param acc - WordPress color palette array
 * @param param - tuple of tailwind key and color values
 *
 * @returns
 */
export interface toThemeArray {
    (acc: WordPressPalette, [key, value]: [string, TailwindColorValue | TailwindValuesColor]): WordPressPalette;
}
export declare const toThemeArray: toThemeArray;
/**
 * Get color palette from a tailwind config file
 *
 * @param path - path to tailwind.config.json
 * @returns config.theme.extend.colors
 *
 * @public
 */
export interface getPalette {
    (path: string): Promise<TailwindValuesColor>;
}
export declare const getPalette: (path: string) => Promise<any>;
/**
 * Transform tailwindcss palette to wordpress theme.json palette
 *
 * @param palette - from tailwindcss
 *
 * @public
 */
export interface transformPalette {
    (palette: TailwindValuesColor): WordPressPalette;
}
export declare const transformPalette: transformPalette;
//# sourceMappingURL=tailwind.adapter.d.ts.map