"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPalette = exports.getPalette = exports.toThemeArray = exports.transform = void 0;
const name = label => `${label.charAt(0).toUpperCase()}${label.slice(1)}`;
const transform = (slug, color) => ({
    name: name(slug),
    slug,
    color,
});
exports.transform = transform;
const toThemeArray = (palette, colorValue) => {
    const [color] = colorValue;
    const normalizeKey = (key) => key !== 'default' ? `${color}-${key}` : color;
    const flatten = (color, shades) => typeof shades !== 'string'
        ? Object.entries(shades).reduce((all, [variant, color]) => {
            return [...all, [normalizeKey(variant), color]];
        }, [])
        : [[color, shades]];
    return flatten(...colorValue).reduce((palette, color) => [...palette, (0, exports.transform)(...color)], palette);
};
exports.toThemeArray = toThemeArray;
const getPalette = async (path) => {
    const tailwindImport = await Promise.resolve().then(() => __importStar(require(path)));
    const tailwind = tailwindImport?.default ?? tailwindImport;
    return tailwind?.theme?.extend?.colors ?? {};
};
exports.getPalette = getPalette;
const transformPalette = (palette) => {
    return Object.entries(palette ?? {}).reduce(exports.toThemeArray, []);
};
exports.transformPalette = transformPalette;
