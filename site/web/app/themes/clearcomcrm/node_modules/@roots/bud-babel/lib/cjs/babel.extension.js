"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.options = exports.mixin = exports.name = void 0;
const babel_config_1 = require("./babel.config");
const babel_constants_1 = require("./babel.constants");
/**
 * Adds Babel transpiler support to Framework projects
 *
 * @public
 */
exports.name = '@roots/bud-babel';
/**
 * Exposes app.babel configuration utility
 *
 * @public
 */
const mixin = async (app) => ({
    babel: [babel_config_1.Config, app],
});
exports.mixin = mixin;
const options = async (app) => ({
    cacheDirectory: app.path(`@storage/cache/babel`),
    env: {
        development: {
            compact: false,
        },
    },
    root: app.path('@src'),
});
exports.options = options;
/**
 * Extension register event
 *
 * @public
 */
const register = async (app) => {
    app.build
        .setLoader('babel', require.resolve('babel-loader'))
        .setItem('babel', babel => babel.setLoader(`babel`).setOptions(app => {
        const options = app.extensions.get('@roots/bud-babel').options;
        app.babel?.presets &&
            options.set('presets', Object.values(app.babel.presets));
        app.babel?.plugins &&
            options.set('plugins', Object.values(app.babel.plugins));
        return options.all();
    }))
        .rules.js.setUse(items => [`babel`, ...items]);
    app.babel.setPresets(babel_constants_1.DEFAULT_PRESETS).setPlugins(babel_constants_1.DEFAULT_PLUGINS);
};
exports.register = register;
